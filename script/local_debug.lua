return {
	CONSOLE = {
		docked = true,
		history = {
			"t:RefreshOrders()",
			"print(t:GetInventory():CalculateValue())",
			"for i = 1, 3 do print( t[1].inventory:CalculateValue() ) end",
			"print(t:IsBusy())",
			"for i = 1, 3 do print( t[1].inventory:CalculateValue() ) end",
			"print(t:GetAspect( Aspect ))",
			"print(t:GetAspect( Trait.Leader ))",
			"print( base_match( Trait.Collector, Trait.Leader ))",
			"print( base_match( Trait.Collector, Trait ))",
			"print( base_match( Trait.Collector, Aspect ))",
			"c = Trait.Collector()",
			"print(c )",
			"print( is_class( c, Aspect ))",
			"print( is_class( c, Trait.Leader ))",
			"print( is_class( c, Trait.Collector ))",
			"print( is_class( c._class, Trait.Collector ))",
			"print(t:GetAspect( Trait.Collector ))",
			"print(t:GetAspect( Trait.Leader ))",
			"for i = 1, 3 do print( t[1].inventory:CalculateValue() ) end",
			"print(string.byte(\"a\"))",
			"print(string.byte(\"asdf\"))",
			"t = { 1, 2, 3, 4, 5 }; print(table.unpack(t, 3, 4 )",
			")",
			"t = { 1, 2, 3, 4, 5 }; print(table.unpack(t, 3, 4 ))",
			"print(t)",
			"print(t, is_instance( t, Interaction ))",
			"print( t:CheckPrivacy( player, PRIVACY.ID ))",
			"t:GenerateLocTable( player )",
			"print(player)",
			"print( loc.format( \"{1.Id}\", t:LocTable( player ))",
			"print( loc.format( \"{1.Id}\", t:LocTable( player )))",
			"DBG(t)"
		}
	},
	DEBUG_FILE = "debug.lua"
}