return {
	CONSOLE = {
		docked = true,
		history = {
			"print( Interaction.BuyFromStore._classname)",
			"print( is_class( Interaction.BuyFromShop ))",
			"print( Interaction.BuyFromShop._classname)",
			"print( Interaction.BuyFromShop._class)",
			"print( Interaction.BuyFromShop._bases)",
			"print( is_instance( Interaction.BuyFromShop(), Verb ))",
			"print( is_instance( Interaction.BuyFromShop(), Interaction ))",
			"sdf",
			"print(han)",
			"print(player)",
			"t:RegenerateLocTable( player )",
			"print(t:GetAspect(Aspect.Agenda))",
			"print(t:IsBusy())",
			"print(t:IsBusy(VERB_FLAGS.MOVEMENT))",
			"print(t:IsBusy(VERB_FLAGS.ATTENTION))",
			"print(puppet)",
			"print(player)",
			"print(t:IsSatisfied( player ))",
			"print(player:GeAspect( Aspect.TokenHolder ).tokens )",
			"print(player:GetAspect( Aspect.TokenHolder ).tokens )",
			"print(tostr(player:GetAspect( Aspect.TokenHolder ).tokens) )",
			"print(tostr(player:GetAspect( Aspect.TokenHolder ).tokens[1]:IsCommitted() )",
			"print(player:GetAspect( Aspect.TokenHolder ).tokens[1]:IsCommitted() )",
			"print(player:GetAspect( Aspect.TokenHolder ):GetFaceCount( DIE_FACE.DIPLOMACY ))",
			"player:GainXP(10)",
			"print( player:GetStat( STAT.XP ))",
			"for k, v in player:Stats() do print(k,v) end",
			"print(tostr(player.stats))",
			"print( player:GetStat( STAT.XP ))",
			"print( player:GetStat( STAT.MIND ))",
			"print( 3.523 % 2 )",
			"print(world:GetDateTime() - t.when )"
		}
	},
	DEBUG_FILE = "debug.lua"
}