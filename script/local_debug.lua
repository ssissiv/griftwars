return {
	CONSOLE = {
		docked = true,
		history = {
			"print( Calendar.GetNormalizedTimeOfDay( now, 19 ))",
			"print( Calendar.GetNormalizedTimeOfDay( now, 20 ))",
			"print( Calendar.GetNormalizedTimeOfDay( now, 22 ))",
			"print(t:CanInteract())",
			"sdf",
			"print(t:HasAspect( Aspect.Behaviour ))",
			"print( Aspect.Behaviour )",
			"print( is_class( Behaviour.ManageFatigue ))",
			"print( is_class( Behaviour.ManageFatigue, Aspect.Behaviour ))",
			"print(t)",
			"print(t:IsBusy())",
			"print(t:IsBusy( VERB_FLAGS.HANDS ))",
			"s = Verb.Scrounge(); print( s:CanInteract( t ))",
			"print( is_instance( t, Skill ))",
			"print(t.owner:GetStatValue( STAT.FATIGUE ))",
			"print(t.owner:GetStat(STAT.FATIGUE):GetPercent())",
			"print( Easing.outQuad( 0.16, 0, PRIORITY_EMERGENCY, 1.0 ))",
			"print( Easing.outQuad( 0.16, 0, PRIORITY.EMERGENCY, 1.0 ))",
			"print( Easing.outQuad( 0.16, 0, PRIORITY.EMERGENCY, 1.0 ) + PRIORITY.FUN )",
			"for i = 0, 1, 0.1 do print( easing.outQuad( t, 0, 1.0, 1.0 )) end",
			"for i = 0, 1, 0.1 do print( i, easing.outQuad( i, 0, 1.0, 1.0 )) end",
			"for i = 0, 1, 0.1 do print( i, Easing.outQuad( i, 0, 1.0, 1.0 )) end",
			"print( Easing.inQuad( 0.8, 0, 75, 1.0 ))",
			"print(t:GetStat( STAT.FATIGUE ):GetPercent())",
			"print(t:GetStat( STAT.FATIGUE ):GetValue())",
			"print(t)",
			"verb = t",
			"print(verb:CanInteract(t))",
			"print(t:IsBusy())",
			"print(t:IsBusy(VERB_FLAGS.MOVEMENT))",
			"agent = t",
			"print(t:CanInteract(agent))"
		}
	},
	DEBUG_FILE = "debug.lua"
}