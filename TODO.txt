TODO
====

STARDEW:
	* Start with Parsnip Seeds.
	* Quest: Harvest Parsnips, Talk to 28 people.

	About ~40 seconds an hour (so about 40*20 = 13 minutes max per day)
	Actions cost Energy. YOu can quickly deplete your energy by 9 am on the first day if you chop furiously.

	Day 1: Plant parsnips.  Water them.  Talk to people.  Explore.  See Calendar, loot items...
	Day 2: Note from Willy: Meet at Beach.  Get a fishing rod, can fish.
		You can loot, plant, buy, explore, talk, find quests, dig, fish, clear/chop, harvest,...
	Day 3: Ad for a 24-slot backpack
		Night: Level Up Fishing!
	Day 4: Quests.
	Day 6-10?: Community Centre

	It is satisfing to plant, water, watch grow.  VERY satisfying to sow.
	Getting things always feels great.

	End-of-day level ups. You don't see XP.


GRIFTWARS:
	SCAV start: acquainted with a dude.  Start with 3 coins.
	You can scavenge junk piles, kill things, loot eggs/plants on the outskirts, eavesdrop conversations,
	j

SCAVENGER:
	* SCAV: scavenge with them. (follow, attach to verb), get stuff)
		Gain Trust as you Scavenge with them. (+trust, +coins / minor items)
		Trust Level 1: DIPLOMACY
		Trust Level 2: Introduction to T1 SHOPKEEP (-2 DIPLO REQ w/ Shopkeep)

* Venture Corp
	- give CEO salary
	- generate hierarchy

* Quests: to gain Trust.
	- Tokens for specific people?	

* JOBS.
	- how to assure the player works the jobs they're hired for?
	- leaving
	- getting fired
	- salary, job child-verbs, (side effects)

ECON-CENTRIC AGENTS:
	Agents Import and Export resources.
	Imports/Exports are linked to eachother to satisfy requirements.
	They can have multiple links.
	Some must satisfy their entire requirement at once, while others can be served out piecemeal.
	
INTEL:
	* Revealed by "Rumors".
	  * How much to bribe this person? Who you can bribe?
	* Wanna make someone disappear? Need permission. (all deaths within a region...)

	* Knowledge about Agents (PRIVACY flags) decay except for the 3 you are allowed to mark as "Important"
	* Friends are automatically "Important"
	* You can only mark so many things as "Important", and the rest will decay.

MINIGAME:
	Operation Overkill II press-key-timing for verbs.
	NEEDED?!
	
NEW AGENTS:

	SNOOP: Reveal PRIVACY flags about local T1s, famous ppl.
		Gain Trust when you pay them. (+trust, -coins)
	RANGERS: follow, fight.
		Gain Trust for each shared kill. (+trust, -health)
		Gain Intel about other RANGERS.
		Gain: Combat skill.
	WORKER: gets you a job.
		Gain trust and wages. +trust, +money, +trust w/ T2 boss, +trust w/ other employees.

	T2:
		SHOPKEEP:
			Gain Trust as you trade with them.
			Trust Level 1: Bonus to trade.
			Trust Level 2: 

		WORKER BOSS.

		HEAD RANGERS (T2 Rangers):
			Fight to T2 Enemies. (+trust per kill)
			Trust lvls: T2 Combat skills, (T2 GEAR as monster loot), Become HEAD RANGER.
			Can: Learn all RANGER identities, Recruit RANGERS.
			Relations: P

		HUBS (T2 SNOOP): Has underling SNOOPs.
			Trust when info is brought.
			Gain: Hacking skill.



	Controllers:
		* Regional warlords.
		* "Mayors" of specific areas -- have all the top connections.
		* Look to import intell, or money, or warfare.
	CEOs
		* 3rd tier person who controls a specific economy (a business)
	Bio-Agriculture Farmers.
		work behaviour: wander in field, work it, use robots randomly
		* Source: nutri-pallets
	Engis.
		* Craft hi-tech gadgets.
		Needs: E.Parts, or is a frustrated worker
		* Source: gadgets, Sink: E.Parts
	Factory Mgr.
		* [KINGPIN] Has his subordinate meet w/ Engis to do exchanges.
		* Source: [E.Parts]
	Toolers
		* Make weapons out of [Metal], [E.Parts], [Battery]
		


LOCALES:
	* Places to go while agents are relaxing.
	The Neon Strip - engis lurk here, gaming parlours, etc.
	Bio Domes - farmers work here, commute from the 'burbs
	Flesh Road - for all that stuff.

BEHAVIOUR:
	* Should generating Behaviours use POtentialVerb set?  THere is some redundancy when specifying potential verbs via COllectVerbs, and having to manually add a Behaviour verb in the character def.  Having two requirements makes potential verbs inflexible.
	* Does the normal Behaviour AI run for the player, and the player simply *selects* what should be done?
	
	
	figure out how behaviours run in parallel without stepping on eachothers toes.
	* Think of behaviour as a 'fourier analysis'. Start with the basic 'spine' of
	the behaviour, the basest default, eg. "Diurnal".
	* Then layer on complexity, whose times/etc vary dpeending on agent state.
	* Not dissimilar to what we have now, biggest problem is figuring out the correct priority. I think priority
	is actually a vector; firstly time scale, and secondly importance. (how important is this behaviour is on the order of this time unit).  So for example, "running from enemy" is on the short time scale (seconds), and very improtant.  "obtaining the killswitch" is very important but on a large time scale.
	* behaviours are also dynamic:
		"Stay alive" isn't always there, it's only there under certain criteria/when certain things happen, like
		getting in combat.  Once out of combat, the behaviour removes itself.
	
	Are behaviours what we should have a DSL for?  Want to basically work in these units of game data.


DEBUG LOG FILE:
	pls.

SENSELOG:
	needs to keep parameters, not just text, to so newly learned identities change logs from the past.

AI/PLANNING:
Structuring Access to resources and planning relationships:
	track gain/loss of resources within Verbs for an agent for a week, say.
	agent becomes a sink or source of these.
	* relationships dictate a resource flow (specified in broad categories) that are permitted.
	* a well-connected agent has broad access to sinks or sources as the need may be, and then
	wish to construct a particular relationsihp with the target.
	* An given agent has paritcular Verbs avilaalbe for constructing these relationships.
	* A given agent might even have a relationship (subordinate) who's job is to construct these relationships for him.

You have max token slots, and tokens in them.  You commit them to certain requirement sets (embedded in social Interactions, etc.), which typically unlocks something.

Diplo 1 can unlock lvl 1. Acquintances, who will reveal knowledge.

Knowledge gains you xp.

When you sleep, you convert XP to charge your stats.  (See punch club.)  When stats exceed a level, you can add a token, upgrade a token, roll for a token, etc.  Stat drain is locked in at integers (won't drain past a level).

Stats drain over time, and take increasingly more XP to increase.

You must find where your tokens best fit to optimize for XP gain in a cycle of growth.



CMD LINE
	- just mud it up.  Fuck the UI.

WORLD should be an entity with a self-ref world ptr?

INFO MODEL:
	Add verbs for utilizing certain info.
	LOCAL_NEWS:
		Event model for tracking newsworthy events within a region?
		Somehow, local news lets you learn about 'public aspects' of people.



AI:
	implement utility functions for verbs.
	all agents choose their highest weighted verb
	sum utilities for total score.

	full search is gonna be prohibitive (#agents * #verbs_avg * #targets_per_verb == 100 * 10 * 100 == 100k)
	Branching factor of 100k....

	Could random pick verbs: #agents * 1 * 100 = 10000
	Once a target is found, could stick with that: #agents.

	Note Verb/targets are highly conditional; in particular, when targets are in contact:
		* (hustler meets boss to turn in cash) is only valid if hustler has cash, and they are in the same location.
			searching location is dumb.  so the verb should 'register' the agents in a valid location.
		* a full pass occurs when all agents are bound to verbs with a SETTING.

	eg:
		Pass 0:
			Collect verbs from all agents, with bound actors where necessary:
			eg. ReupFromBoss( runner=Bob, boss=Bob's boss) 
				KillRichDude( killer=Kev, target=is_rich )

			Randomly pick verbs and bind agents until all agents are bound, and their utilities evaluated:
				KillRichDude( killer=Kev, target=Bob )
					Kev's utility: 10 (gets mad loot, likes increase in cruelty)
					Bob: -50 (really doesn't want to get killed)
				ReupFromBoss( runner=Bob, boss=Bob's boss)
					Runner: 10
					Boss: 10

			When an agent is bound, all associated verbs are Locked (since that agent can no longer be bound)

		Pass n+1:
			Pick agent with lowest utility, unpick bound verb and bound agents.
			Bob: -50 : Unbind KillRichDude (free's up Kev, and Bob)
			Search from bob and kev's verbs:
				Kev: BuyWeaponry( Kev, target=George the weaponmaster ) : 5
				Bob: Sleep( Bob ): 4
			Or perhaps:
				Steal( thief=Kev, target=Bob ) (Kev: 8)
				Bob: Sleep( Bob ) : 4

			A bound agent has tags added to it by the role it is bound to:
				Sleep( sleeper )
					sleeper: +can_steal, +can_kill

				Thus sleepy can only bind sleepy agents, and allows them to be stolen from and killed.

				ReupFromBoss( runner, boss )
					runner: +bound
					boss: +bound

				Participating in a re-up adds bound to both parties, disqualifying them from being bound to most other verbs.

			NOTE: variables may have various constraints or added tags specified:
				StealRichDude( thief=Kev, target=Bob )
					thief: +bound
					target: =can_steal
				  Here, Bob can only be bound if he has a [can_steal] role, of which Sleep is one.Also note the lack of +bound: this allows target to be bound even if already flagged as such.

			NOTE: tags can have properties which define how they match in roles: EXCLUSIVE flags like bound invalidate the role if the subject already has teh given tag.  Note that non-EXCLUSIVE tag requires an associated count if it was aded multiple times; this allows unbinding the verb to preserve the correct tags on a subject.


	Agents and locations are 'free' until they are boudn to a verb which dictates a SETTING.  A verb's setting is defined by 'at:'
	Let's specialize Sleep to have a setting:

		SleepAtHome( sleeper ) => added from Effect.Sleepy
			sleeper: +can_steal, +can_kill
			at: sleeper.home

	This allows sleeper to calculate a utility for this instantiation.
		+10 (base), +10 (at home) = 20

	What if we want to model narcolepts, who might fall asleep visiting a friend:

		SleepAtFriends( sleeper, friend ) => Added by Trait.Narcolept
			sleeper: +can_steal, +can_kill, +sleeping
			friend: +peeved
			at:
				friend.house

		ReupFromBoss( runner, boss ) => Added from Job.DrugRunner
			runner:
			boss:
			at:
				runner.house
				boss.house
				=corner
				=boss.office

		Here, the bound location is randomly chosen from the valid set.

	Other examples:

		BuyContraband( seller, buyer )
			buyer: !lawful
			seller: has:contraband
			effects:
				exchange items, money, modify stats, ...
			at:
				=corner
				=seller.house
				=seller.office
				=black_market

		Pickpocket( thief, victim ) => from Skill.Pickpocket
			thief: +busy
			seller: =can_steal
			at:
				=busy

	Until the setting is fully bound, bound agents are still free.  They can still be bound to verbs, as long as the verb is consistent with this one:

		Raving( madman ) => from Trait.Crazy
			madman: +busy
			at:
				=busy

		if Kevin is a thief and crazy, he cannot be both pickpocketing and raving.  He can however be Pickpocketing a raving madman.

	Binding Settings
		Supposing Pickpocket( Kevin, Charles ) and Raving( charles ) are both bound verbs.  The free location in both verbs has the same set of potentail locations: the set of those flagged "busy".  These free locations are 'collapsed', and a random location is selected.  If there is no such location, then the setting would have been the empty-set and the original binding would have been invalid.

	Exclusive Tags and Tag Counts
		Suppose the two verbs are chosen: Pickpocket( Kevin, Charles ), Pickpocket( Mike, Charles ).  Since Charles satisfies =can_steal and seller does not dictate an exclusive tag using +! (like busy), this is possible.  In addition, the settings are the same (they are the same verb) and therefore do not collapse.  But we might not want Charles to be pickpocketed by multiple people simultaneously, in this case we can specify:

		victim: =can_steal +!stolen

		Since binding Charles now adds the stolen tag whilst requiring it to not be set, Charles can no longer be victim in more than one verb.  This is known as an exclusive tag.  If we wanted to say Charles could be the victim of at most 2 verbs, we could do:

		victim: =can_steal +(<=2)stolen

		which states that the stolen tag is added, and the stolen tag count must be less than or equal to 2.

	Bottoming Out and the Busy Tag
		At what point do we stop binding Verbs?  We let the 'busy' tag be a special exclusive tag.  Once all the agents are tagged with this exclusive tags, we resolve settings.  This collapses all free locations into a single choice.

	Suppose we have:
		Suppose we define the following verbs:
			Steal( thief, victim ) => from Skill.Pickpocket
				thief: +!busy
				victim: =can_steal
				at:
					=corner

			Scrounge( actor ) => from skill.Scrounge
				actor: +!busy
				at:
					=corner
					=junkyard

			Work( worker ) => from Job.GenericJob
				worker: +!busy
				at:
					=workplace

			Sleep( sleeper ) => from Trait.Biological
				actor: +!busy =sleepy +can_steal
				at:
					sleeper.home
					=corner

		The intiial verb set for Kevin, Chris, Charles is: 
			Steal( thief={ Kevin }, victim={ !Chris, !Charles }, at={ Corner } )
			Scrounge( actor= { Kevin }, at={ Corner, Junkyard } )
			Sleep( sleeper = { Kevin }, at= { Corner} )

			Work( { worker = {Chris }, at = { Lumin Mill, Lumber Mill })
			Sleep( sleeper = {Chris}, at = { Corner } )

			Work( worker = { Charles}, at = {Lumin Mill, Lumber Mill} )
			Sleep( sleeper = {Charles}, at = { Corner })
		
		None of the agents are yet busy, so we pick a random verb:
			Work( worker = { Charles* }, at = {Lumin mill, Lumber Mill} ) => causes Charles to be busy and binds worker: Charles.
			This also updates:
				Sleep( sleeper ={ !Charles }, at = { Corner } ) which effectively disables this Verb because Charles is now busy and sleeper is the empty set.


		Pick another verb:
			Sleep( sleeper = {Chris*}, at = {Chris' House, Corner} ) => causes Chris to be busy.  Note the at variable was updated because binding sleeper adds sleepe}, at={Corner} )
			Updates:
			Steal( thief={Kevin}, victim={ Chris, !Charles }, at={Corner} ) => Chris is now valid in the victim set.

		Pick:
			Steal( thief={Kevin*}, victim={ Chris, !Charles }, at={Corner} )
			which causes:
			Scrounge( actor={!Kevin} )
			Sleep( sleeper={!Kevin} )

		At this point, all agents are busy,  so we RESOLVE the verbs by merging and collapsing the remaining bindings:
			Work( Charles ) collapses to The Plack Mine.
			Sleep( Chris, at:X ) and Steal( Kevin, Chris, at:X ) share the same setting with the flags =corner.  A random corner is selected: A Dingy Corner.

		So the situation is Charles is at work, Chris is sleeping on the corner and Kevin is stealing from Chris.

		Note that if Chris had slept at home, then Kevin could not steal from him.  This would immediately exclude Steal( Kevin, X ) and the only remaining choices for Kevin would be to Sleep (if he was sleepy) or Scrounge (otherwise).

		If Chris had not slept but Worked(), then Steal( Kevin, ... ) would also be invalidated.

		Roughly, Verbs come in with free variables and constraints upon these.  Free variables are variables with at least one (valid) candidate.  Free verbs are verbs whose variables are all free.  From the set of free verbs, select one and randomly bind a variable to a valid condidate.  This may alter the free states of other variables and verbs.  Continue until there are no more free verbs.  Any fully bound verbs dictate a valid game state.

	Evaluating Utility and Optimization

		Once all verb settings are resolved, utility functions can be evaluated.  Thus begins optimization: the process of trying to raise the utility for agents.  Select the agent with the lowest utility and improve it.  If it cannot be improved, optimize the next lowest agent.  Continue until all agents are optimized for local maxima.

		In this token example, Work will have highest utility unless sleepy, in which case Sleep would have higher utility.  To find these optima, we would unbind the lowest utility agent from its verb:
			Sleep( Chris ) => Chris is no longer busy.

		Thus Sleep( Chris ) and Work( Chris ) became available selections again: choose Work( Chris ) and resolve; this yields a different utility.  If we run out of verbs for Chris, then we've reached a local maxima for his Utility.


	PLANNING
		Outcomes from verbs in one phase change the possibility space for future phases.  Of course, planning a phase at a time randomly binding verbs seems more likely to cause agents to jump from local maxima to local maxima randomly in a mindless fashion.  What we want is to produce a sequence of verbs for an Agent to reach new maximas.  eg. if Kevin can continually steal, he will eventually have enough money to bribe a shopkeeper, which will cause the shopkeeper to trust him, thus allow him to buy contraband, thus allow him to sell contraband to a contact for profit.

		Thus we will need to plan multiple phases in the future: if we permit non-optimal verbs, might they yield a higher utility in future phases?

		Q: can agents ever select a non-optimal verb, which yields higher maxima several phases in the future?

		Q: does order of binding play a significant role?

	HIDDEN INFO
		Not all agents or locations are available.  They must be learned.  A given drug runner A might only know his boss, a couple other runners, and the bum on the corner.  Therefore the candidate set for A's verbs are limited to the agents and locations A knows about.  This helps the search immensely.

	RANDOM EFFECTS
		Some verbs yield random effects, or choice results.  eg. Learning 'one of' an agent's network.  These should be deterministic based off the acting agent.  That way, equivalent Verb bindings always reveals equivalent results which may help the planning phase "accidnetally" getting stuck in local minima.


	EXAMPLE STORYLINES
		Drug Runner Aaron knows a Scavenger, a Mecha Tooler, a Runner, and his Boss.
		He's also got high Mentality, is a Pickpocket, and is Thrifty.

		He can get contraband from his boss and sell it on the corner for $10 indefinitely.
		BUT he can intimidate his fellow Runner to get additional contraband, and gain an additonal $10.

		Most NPCs spend all their extra cash on Luxury, but because he is Thrifty, Aaron's profits rack up.
		Eventually he gets $100.  He buys a bug from the Mecha Tooler, and plants it in his Boss's office.

		This opens up his network to a number of other NPCs, one of which is a Wealthy Merchant whom he pickpockets a luxry item, sells it to his Boss for $500, etc...

	Korn:
		[11pm - 10am] Sleeps at home
		[10am - 2pm] Goes to the corner to sell Ice.
		[2pm - 4pm] Gambles at the Dingy Stool.
		[4pm - 8pm] Chills at home.
		[9pm - 11pm] Drinks at the Neon Sky.

	Neon Sky:
		[3pm - 4pm] Ice transaction: 
		[8pm - 11pm] 4-8 patrons
		[11pm - 12pm] Brawl between patrons



















